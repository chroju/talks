{"version":3,"sources":["../src/no-doubled-negative-ja.js"],"names":[],"mappings":";AACA;;;;;;;kBAUe,UAAU,OAAV,EAAmB;AAAA,QACvB,MADuB,GACe,OADf,CACvB,MADuB;AAAA,QAChB,SADgB,GACe,OADf,CAChB,SADgB;AAAA,QACL,MADK,GACe,OADf,CACL,MADK;AAAA,QACE,SADF,GACe,OADf,CACE,SADF;;;AAG9B,QAAM,YAAY,yBAAM,OAAN,CAAlB;AACA,QAAM,aAAa,0BAAO,OAAP,CAAnB;AACA,QAAM,eAAe,8BAAS,OAAT,CAArB;AACA,QAAM,cAAc,4BAAQ,OAAR,CAApB;AACA,QAAM,eAAe,8BAAS,OAAT,CAArB;AACA,QAAM,iBAAiB,gCAAW,OAAX,CAAvB;AACA,QAAM,gBAAgB,gCAAU,OAAV,CAAtB;AACA,+BACK,OAAO,GADZ,YACiB,IADjB,EACsB;AACd,YAAM,OAAO,UAAU,IAAV,CAAb;AACA,YAAM,UAAU,EAAhB;AACA,YAAM,YAAY,SAAZ,SAAY,CAAC,KAAD,EAAW;AACzB,gBAAI,KAAJ,EAAW;AACP,wBAAQ,IAAR,CAAa,KAAb;AACH;AACJ,SAJD;AAKA,eAAO,+BAAe,IAAf,CAAoB,qBAAa;AACpC,mBAAO,UAAU,mBAAV,CAA8B,IAA9B,CAAP;AACH,SAFM,EAEJ,IAFI,CAEC,kBAAU;AACd,mBAAO,OAAP,CAAe,iBAAS;AACpB,0BAAU,UAAU,KAAV,CAAV;AACA,0BAAU,WAAW,KAAX,CAAV;AACA,0BAAU,aAAa,KAAb,CAAV;AACA,0BAAU,YAAY,KAAZ,CAAV;AACA,0BAAU,aAAa,KAAb,CAAV;AACA,0BAAU,eAAe,KAAf,CAAV;AACA,0BAAU,cAAc,KAAd,CAAV;AACH,aARD;AASH,SAZM,EAYJ,IAZI,CAYC,YAAK;AACT,oBAAQ,OAAR,CAAgB,iBAAS;AACrB,uBAAO,IAAP,EAAa,KAAb;AACH,aAFD;AAGH,SAhBM,CAAP;AAiBH,KA1BL;AA6BH,C;;AA/CD;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA","file":"no-doubled-negative-ja.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\n// tokens -> event emitter -> return check\nimport {getTokenizer} from \"kuromojin\";\nimport なくはない from \"./rules/nakuha-nai\";\nimport ないでもない from \"./rules/naidemo-nai\";\nimport ないものではない from \"./rules/naimonodeha-nai\";\nimport ないことはない from \"./rules/naikotoha-nai\";\nimport ないわけではない from \"./rules/naiwakedeha-nai\";\nimport ないとはいいきれない from \"./rules/naitohaiikire-nai\";\nimport ないとはかぎらない from \"./rules/naitohakagira-nai\";\nexport default function (context) {\n    const {Syntax,getSource, report,RuleError} = context;\n    // initialize each rules\n    const ruleなくもない = なくはない(context);\n    const ruleないでもない = ないでもない(context);\n    const ruleないものではない = ないものではない(context);\n    const ruleないことはない = ないことはない(context);\n    const ruleないわけではない = ないわけではない(context);\n    const ruleないとはいいきれない = ないとはいいきれない(context);\n    const ruleないとはかぎらない = ないとはかぎらない(context);\n    return {\n        [Syntax.Str](node){\n            const text = getSource(node);\n            const results = [];\n            const pushError = (error) => {\n                if (error) {\n                    results.push(error);\n                }\n            };\n            return getTokenizer().then(tokenizer => {\n                return tokenizer.tokenizeForSentence(text);\n            }).then(tokens => {\n                tokens.forEach(token => {\n                    pushError(ruleなくもない(token));\n                    pushError(ruleないでもない(token));\n                    pushError(ruleないものではない(token));\n                    pushError(ruleないことはない(token));\n                    pushError(ruleないわけではない(token));\n                    pushError(ruleないとはいいきれない(token));\n                    pushError(ruleないとはかぎらない(token));\n                });\n            }).then(()=> {\n                results.forEach(error => {\n                    report(node, error);\n                })\n            })\n        }\n    }\n\n}"]}