{"version":3,"sources":["../src/no-mix-dearu-desumasu.js"],"names":[],"mappings":";AACA;;;;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;;;AACO,IAAM,oCAAc;AACvB,cAAU,MADa;AAEvB,WAAO;AAFgB,CAApB;;;AAMP,IAAM,iBAAiB;AACnB,sBAAkB,EADC,E;AAEnB,oBAAgB,EAFG,E;AAGnB,oBAAgB,EAHG,E;;AAKnB,cAAU;AALS,CAAvB;;AAQA,OAAO,OAAP,GAAiB,SAAS,oBAAT,CAA8B,OAA9B,EAAiE;AAAA;;AAAA,QAA1B,OAA0B,yDAAhB,cAAgB;AAAA,QACvE,MADuE,GAClD,OADkD,CACvE,MADuE;AAAA,QAC/D,SAD+D,GAClD,OADkD,CAC/D,SAD+D;;AAE9E,QAAM,SAAS,mCAAe,OAAf,CAAf;AACA,QAAM,eAAe,0CAArB;AACA,QAAM,WAAW,QAAQ,MAAR,KAAmB,SAAnB,GAA+B,QAAQ,MAAvC,GAAgD,eAAe,MAAhF;AACA,QAAM,cAAc,+BAAqB,OAArB,EAA8B;AAC9C,wBAAgB,QAAQ,YAAR,KAAyB,YAAY,QADP;AAE9C,qBAAa,QAAQ,YAAR,KAAyB,YAAY,KAFJ;AAG9C;AAH8C,KAA9B,CAApB;AAKA,QAAM,gBAAgB,iCAAuB,OAAvB,EAAgC;AAClD,wBAAgB,QAAQ,cAAR,KAA2B,YAAY,QADL;AAElD,qBAAa,QAAQ,cAAR,KAA2B,YAAY,KAFF;AAGlD;AAHkD,KAAhC,CAAtB;AAKA,QAAM,cAAc,+BAAqB,OAArB,EAA8B;AAC9C,wBAAgB,QAAQ,YAAR,KAAyB,YAAY,QADP;AAE9C,qBAAa,QAAQ,YAAR,KAAyB,YAAY,KAFJ;AAG9C;AAH8C,KAA9B,CAApB;AAKA,4CAEK,OAAO,MAFZ,YAEoB,IAFpB,EAEyB;AACjB,YAAM,OAAO,UAAU,IAAV,CAAb;AACA,sBAAc,KAAd,CAAoB,IAApB,EAA0B,IAA1B;AACH,KALL,yBAOK,OAAO,QAPZ,YAOsB,IAPtB,EAO2B;AACnB,YAAM,OAAO,UAAU,IAAV,CAAb;AACA,oBAAY,KAAZ,CAAkB,IAAlB,EAAwB,IAAxB;AACH,KAVL,yBAYK,OAAO,SAZZ,YAYuB,IAZvB,EAY4B;AACpB,YAAM,mBAAmB,CAAC,OAAO,IAAR,EAAc,OAAO,IAArB,EAA2B,OAAO,KAAlC,EAAyC,OAAO,UAAhD,EAA4D,OAAO,QAAnE,CAAzB;;AAEA,YAAI,OAAO,WAAP,CAAmB,IAAnB,EAAyB,gBAAzB,CAAJ,EAAgD;AAC5C;AACH;;AAED,YAAI,OAAO,WAAP,CAAmB,IAAnB,EAAyB,CAAC,OAAO,MAAR,EAAgB,OAAO,QAAvB,CAAzB,CAAJ,EAAgE;AAC5D;AACH;;AAED,qBAAa,qBAAb,CAAmC,IAAnC,EAAyC,gBAAzC;;AAEA,YAAM,OAAO,UAAU,IAAV,CAAb;AACA,oBAAY,KAAZ,CAAkB,IAAlB,EAAwB,IAAxB;AACH,KA3BL,yBA4BK,OAAO,QAAP,GAAkB,OA5BvB,cA4BiC;AACzB,eAAO,QAAQ,GAAR,CAAY,CACf,YAAY,QAAZ,CAAqB,YAArB,CADe,EAEf,cAAc,QAAd,CAAuB,YAAvB,CAFe,EAGf,YAAY,QAAZ,CAAqB,YAArB,CAHe,CAAZ,CAAP;AAKH,KAlCL;AAoCH,CAxDD","file":"no-mix-dearu-desumasu.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport {RuleHelper, IgnoreNodeManger} from \"textlint-rule-helper\";\nimport BodyMixedChecker from \"./BodyMixedChecker\";\nimport HeaderMixedChecker from \"./HeaderMixedChecker\";\nimport ListMixedChecker from \"./ListMixedChecker\";\nexport const PreferTypes = {\n    DESUMASU: \"ですます\",\n    DEARU: \"である\"\n};\n// デフォルトでその項目で多く出現している方を優先します。\n// 明示的にpreferの設定した場合は、そちらを優先した内容をエラーとして表示します。\nconst defaultOptions = {\n    \"preferInHeader\": \"\", // \"である\" or \"ですます\"\n    \"preferInBody\": \"\",   // \"である\" or \"ですます\"\n    \"preferInList\": \"\",   // \"である\" or \"ですます\"\n    // 文末以外でも、敬体(ですます調)と常体(である調)を厳しくチェックするかどうか\n    \"strict\": false\n};\n\nmodule.exports = function noMixedDearuDesumasu(context, options = defaultOptions) {\n    const {Syntax, getSource} = context;\n    const helper = new RuleHelper(context);\n    const ignoreManger = new IgnoreNodeManger();\n    const isStrict = options.strict !== undefined ? options.strict : defaultOptions.strict;\n    const bodyChecker = new BodyMixedChecker(context, {\n        preferDesumasu: options.preferInBody === PreferTypes.DESUMASU,\n        preferDearu: options.preferInBody === PreferTypes.DEARU,\n        isStrict\n    });\n    const headerChecker = new HeaderMixedChecker(context, {\n        preferDesumasu: options.preferInHeader === PreferTypes.DESUMASU,\n        preferDearu: options.preferInHeader === PreferTypes.DEARU,\n        isStrict\n    });\n    const listChecker = new ListMixedChecker(context, {\n        preferDesumasu: options.preferInList === PreferTypes.DESUMASU,\n        preferDearu: options.preferInList === PreferTypes.DEARU,\n        isStrict\n    });\n    return {\n        // 見出し\n        [Syntax.Header](node){\n            const text = getSource(node);\n            headerChecker.check(node, text);\n        },\n        // 箇条書き\n        [Syntax.ListItem](node){\n            const text = getSource(node);\n            listChecker.check(node, text);\n        },\n        // 本文\n        [Syntax.Paragraph](node){\n            const ignoredNodeTypes = [Syntax.Link, Syntax.Code, Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis];\n            // 無視リストのTypeが親にある場合は無視する\n            if (helper.isChildNode(node, ignoredNodeTypes)) {\n                return;\n            }\n            // 見出しと箇条書きは別途チェックするので Header > Str などは無視する\n            if (helper.isChildNode(node, [Syntax.Header, Syntax.ListItem])) {\n                return;\n            }\n            // childrenに無視するtypeがいた場合は無視リストに加える\n            ignoreManger.ignoreChildrenByTypes(node, ignoredNodeTypes);\n            // check\n            const text = getSource(node);\n            bodyChecker.check(node, text);\n        },\n        [Syntax.Document + \":exit\"](){\n            return Promise.all([\n                bodyChecker.checkout(ignoreManger),\n                headerChecker.checkout(ignoreManger),\n                listChecker.checkout(ignoreManger)\n            ]);\n        }\n    }\n};"]}