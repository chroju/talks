{"version":3,"sources":["../src/MixedChecker.js"],"names":[],"mappings":"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","file":"MixedChecker.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport {analyze, isDearu, isDesumasu} from \"analyze-desumasu-dearu\";\nexport default class MixedChecker {\n    /**\n     * @param context\n     * @param {{preferDearu:boolean, preferDesumasu: boolean}} options\n     */\n    constructor(context, options) {\n        this.context = context;\n        /**\n         * 明示的な優先するタイプの指定\n         * @type {{preferDearu: boolean, preferDesumasu: boolean, isStrict: boolean}}\n         */\n        this.options = options;\n        this.dearuCount = 0;\n        this.desumasuCount = 0;\n        this.dearuHitList = [];\n        this.desumasuHitList = [];\n        this._queue = Promise.resolve();\n    }\n\n    check(node, text) {\n        this._queue = this._queue.then(() => {\n            const analyzeOptions = {\n                ignoreConjunction: !this.options.isStrict\n            };\n            return analyze(text, analyzeOptions).then(results => {\n                const retDearu = results.filter(isDearu);\n                const retDesumasu = results.filter(isDesumasu);\n                const dearuCount = this.dearuCount + retDearu.length;\n                const desumasuCount = this.desumasuCount + retDesumasu.length;\n                if (this.dearuCount !== dearuCount) {\n                    this.dearuCount = dearuCount;\n                    this.dearuHitList.push({\n                        node,\n                        matches: retDearu\n                    });\n                }\n                if (this.desumasuCount !== desumasuCount) {\n                    this.desumasuCount = desumasuCount;\n                    this.desumasuHitList.push({\n                        node,\n                        matches: retDesumasu\n                    });\n                }\n            });\n        });\n    }\n\n    /**\n     * @param {IgnoreManger}ignoreManger\n     * @returns {Promise.<TResult>}\n     */\n    checkout(ignoreManger) {\n        return this._queue.then(() => {\n            if (!this.isOver()) {\n                return;\n            }\n            const RuleError = this.context.RuleError;\n            const report = this.context.report;\n            const overType = this.getOverType();\n            const overHitList = this.overHitList(overType);\n            // List\n            overHitList.forEach(({\n                node,\n                matches\n            }) => {\n                // Node\n                const lastHitNode = node;\n                // Tokens\n                matches.forEach(token => {\n                    const hitIndex = node.range[0] + token.index;\n                    if (ignoreManger.isIgnoredIndex(hitIndex)) {\n                        return;\n                    }\n\n                    const ruleError = new RuleError(this.outputMessage(token), {\n                        index: token.index\n                    });\n                    report(lastHitNode, ruleError)\n                });\n            });\n        });\n    }\n\n    isOver() {\n        return this.dearuCount !== 0 && this.desumasuCount !== 0;\n    }\n\n    /**\n     * 優先するtypeを返します。\n     * @returns {*}\n     */\n    getOverType() {\n        if (this.options.preferDearu) {\n            return \"である\"\n        } else if (this.options.preferDesumasu) {\n            return \"ですます\";\n        }\n        if (this.dearuCount > this.desumasuCount) {\n            return \"である\";\n        } else {\n            return \"ですます\";\n        }\n    }\n\n    /**\n     * hist node list\n     * @param overType\n     * @returns {Array}\n     */\n    overHitList(overType) {\n        if (overType === \"である\") {\n            return this.desumasuHitList;\n        } else if (overType === \"ですます\") {\n            return this.dearuHitList;\n        }\n    }\n\n    /**\n     * create message string\n     * @param token\n     * @returns {string}\n     */\n    outputMessage(token) {\n        const overType = this.getOverType();\n        if (overType === \"である\") {\n            // である優先 => 最後の\"ですます\"を表示\n            return `\"である\"調 と \"ですます\"調 が混在\n=> \"${token.value}\" がですます調\nTotal:\nである  : ${this.dearuCount}\nですます: ${this.desumasuCount}\n`;\n        } else if (overType === \"ですます\") {\n            // ですます優先 => 最後の\"である\"を表示\n            return `\"である\"調 と \"ですます\"調 が混在\n=> \"${token.value}\" がである調\nTotal:\nである  : ${this.dearuCount}\nですます: ${this.desumasuCount}\n`;\n        }\n    }\n}\n"]}