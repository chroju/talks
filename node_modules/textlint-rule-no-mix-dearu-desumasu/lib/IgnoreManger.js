// LICENSE : MIT
"use strict";
/**
 * 無視する範囲を管理するライブラリ
 */

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var IgnoreManger = function () {
    function IgnoreManger() {
        _classCallCheck(this, IgnoreManger);

        this._ignoredRangeList = [];
    }

    _createClass(IgnoreManger, [{
        key: "isIgnoredIndex",
        value: function isIgnoredIndex(index) {
            return this._ignoredRangeList.some(function (range) {
                var _range = _slicedToArray(range, 2);

                var start = _range[0];
                var end = _range[1];

                return start <= index && index <= end;
            });
        }
    }, {
        key: "isIgnored",
        value: function isIgnored(node) {
            var index = node.index;
            return this._ignoredRangeList.some(function (range) {
                var _range2 = _slicedToArray(range, 2);

                var start = _range2[0];
                var end = _range2[1];

                return start <= index && index <= end;
            });
        }
    }, {
        key: "addNode",
        value: function addNode(node) {
            this._ignoredRangeList.push(node.range);
        }
    }]);

    return IgnoreManger;
}();

exports.default = IgnoreManger;
//# sourceMappingURL=IgnoreManger.js.map