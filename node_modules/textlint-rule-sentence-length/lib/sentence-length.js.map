{"version":3,"sources":["../src/sentence-length.js"],"names":["defaultOptions","max","module","exports","context","options","maxLength","helper","Syntax","RuleError","report","Paragraph","node","isChildNode","BlockQuote","isChildrenSingleLinkNode","children","length","type","Link","source","text","toString","sentences","newLineCharacters","forEach","sentenceText","sentence","value","currentLine","loc","start","line","originalPositionFromPosition","startLine","index","originalIndexFromPosition"],"mappings":"AAAA;AACA;;AACA;;AACA;;;;AACA;;;;;;AAEA,IAAMA,iBAAiB;AACnBC,SAAK;AADc,CAAvB;AAGAC,OAAOC,OAAP,GAAiB,UAASC,OAAT,EAAgC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAC7C,QAAMC,YAAYD,QAAQJ,GAAR,IAAeD,eAAeC,GAAhD;AACA,QAAMM,SAAS,mCAAeH,OAAf,CAAf;AAF6C,QAGrCI,MAHqC,GAGPJ,OAHO,CAGrCI,MAHqC;AAAA,QAG7BC,SAH6B,GAGPL,OAHO,CAG7BK,SAH6B;AAAA,QAGlBC,MAHkB,GAGPN,OAHO,CAGlBM,MAHkB;AAI7C;;AACA,+BACKF,OAAOG,SADZ,YACuBC,IADvB,EAC6B;AACrB,YAAIL,OAAOM,WAAP,CAAmBD,IAAnB,EAAyB,CAACJ,OAAOM,UAAR,CAAzB,CAAJ,EAAmD;AAC/C;AACH;AACD;AACA,YAAMC,2BAA2BH,KAAKI,QAAL,CAAcC,MAAd,KAAyB,CAAzB,IAA8BL,KAAKI,QAAL,CAAc,CAAd,EAAiBE,IAAjB,KAA0BV,OAAOW,IAAhG;AACA,YAAIJ,wBAAJ,EAA8B;AAC1B;AACH;AACD,YAAMK,SAAS,mCAAiBR,IAAjB,CAAf;AACA,YAAMS,OAAOD,OAAOE,QAAP,EAAb;AACA;AACA,YAAMC,YAAY,6BAAMF,IAAN,EAAY;AAC1BG,+BAAmB;AADO,SAAZ,CAAlB;AAGAD,kBAAUE,OAAV,CAAkB,oBAAY;AAC1B;AACA,gBAAMC,eAAeC,SAASC,KAA9B;AACA;AACA,gBAAIF,aAAaT,MAAb,GAAsBX,SAA1B,EAAqC;AACjC,oBAAMuB,cAAcjB,KAAKkB,GAAL,CAASC,KAAT,CAAeC,IAAnC;AACA,oBAAMD,QAAQX,OAAOa,4BAAP,CAAoCN,SAASG,GAAT,CAAaC,KAAjD,CAAd;AACA,oBAAMG,YAAYH,MAAMC,IAAN,GAAa,CAAb,GAAiBH,WAAnC;AACA,oBAAMM,QAAQf,OAAOgB,yBAAP,CAAiCT,SAASG,GAAT,CAAaC,KAA9C,CAAd;AACArB,uBAAOE,IAAP,EAAa,IAAIH,SAAJ,WAAsByB,SAAtB,4CAAsE5B,SAAtE,QAAoF;AAC7F6B,2BAAOA;AADsF,iBAApF,CAAb;AAGH;AACJ,SAbD;AAcH,KA9BL;AAgCH,CArCD","file":"sentence-length.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport { split } from \"sentence-splitter\";\nimport StringSource from 'textlint-util-to-string';\nimport { RuleHelper } from \"textlint-rule-helper\";\n\nconst defaultOptions = {\n    max: 100\n};\nmodule.exports = function(context, options = {}) {\n    const maxLength = options.max || defaultOptions.max;\n    const helper = new RuleHelper(context);\n    const { Syntax, RuleError, report } = context;\n    // toPlainText\n    return {\n        [Syntax.Paragraph](node) {\n            if (helper.isChildNode(node, [Syntax.BlockQuote])) {\n                return;\n            }\n            // If a single Link node in the paragraph node, should be ignore the link length\n            const isChildrenSingleLinkNode = node.children.length === 1 && node.children[0].type === Syntax.Link;\n            if (isChildrenSingleLinkNode) {\n                return;\n            }\n            const source = new StringSource(node);\n            const text = source.toString();\n            // empty break line == split sentence\n            const sentences = split(text, {\n                newLineCharacters: \"\\n\\n\"\n            });\n            sentences.forEach(sentence => {\n                // TODO: should trim()?\n                const sentenceText = sentence.value;\n                // larger than > 100\n                if (sentenceText.length > maxLength) {\n                    const currentLine = node.loc.start.line;\n                    const start = source.originalPositionFromPosition(sentence.loc.start);\n                    const startLine = start.line - 1 + currentLine;\n                    const index = source.originalIndexFromPosition(sentence.loc.start);\n                    report(node, new RuleError(`Line ${startLine} exceeds the maximum line length of ${maxLength}.`, {\n                        index: index\n                    }));\n                }\n            });\n        }\n    }\n}"]}